/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */


package javaapplication1;


import org.jfree.chart.ChartFactory;
import org.jfree.chart.JFreeChart;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.math.RoundingMode;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.text.DecimalFormat;
import java.util.Arrays;
import java.util.Vector;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.table.DefaultTableModel;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.general.DefaultPieDataset;


/**
 *
 * @author PC
 */
public class function extends javax.swing.JFrame {

    /**
     * Creates new form function
     */
    private DefaultTableModel tableModel;
    public function() {
        initComponents();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        insert = new javax.swing.JButton();
        persentage = new javax.swing.JButton();
        highest = new javax.swing.JButton();
        distribution = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        resultTable = new javax.swing.JTable();
        perCity = new javax.swing.JButton();
        city = new javax.swing.JComboBox<>();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(204, 255, 204));

        insert.setBackground(new java.awt.Color(153, 255, 153));
        insert.setText("insert data");
        insert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertActionPerformed(evt);
            }
        });

        persentage.setBackground(new java.awt.Color(153, 255, 153));
        persentage.setText("Pass and fail percentage in palestine");
        persentage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                persentageActionPerformed(evt);
            }
        });

        highest.setBackground(new java.awt.Color(153, 255, 153));
        highest.setText("highest 3 grades");
        highest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                highestActionPerformed(evt);
            }
        });

        distribution.setBackground(new java.awt.Color(153, 255, 153));
        distribution.setText(" distribution of grades");
        distribution.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                distributionActionPerformed(evt);
            }
        });

        resultTable.setBackground(new java.awt.Color(255, 255, 204));
        jScrollPane2.setViewportView(resultTable);

        perCity.setBackground(new java.awt.Color(153, 255, 153));
        perCity.setText("Pass and fail percentage per city");
        perCity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                perCityActionPerformed(evt);
            }
        });

        city.setBackground(new java.awt.Color(153, 255, 153));
        city.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Jerusalem", "Nablus", "Hebron", "Ramallah", "Tulkarm" }));
        city.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cityItemStateChanged(evt);
            }
        });
        city.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cityActionPerformed(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "php", "servlet", "jsp" }));

        jLabel1.setText("server");

        jLabel2.setText("method");

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "POST", "GET" }));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(perCity, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(persentage, javax.swing.GroupLayout.DEFAULT_SIZE, 244, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addComponent(highest, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(28, 28, 28)
                                .addComponent(distribution, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(insert))
                            .addComponent(city, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1))
                .addGap(48, 48, 48)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(persentage)
                    .addComponent(highest)
                    .addComponent(distribution)
                    .addComponent(insert))
                .addGap(18, 18, 18)
                .addComponent(perCity)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(city, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(64, 64, 64)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(15, 15, 15)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
String dataStr = "";
    String contentStr = "application/x-www-form-urlencoded";

    public void addParameter(String ps, String vs) {
        if (ps == null || vs == null || ps.length() == 0 || vs.length() == 0) {
            return;
        }
        if (dataStr.length() > 0) {
            dataStr += "&";
        }
        try {
            dataStr += ps + "=" + URLEncoder.encode(vs, "ASCII");
        } catch (Exception e) {
            System.out.println(e.toString());
        }
    }
    private void insertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertActionPerformed
 login p1=new login();
 p1.setVisible(true);
            
                
            }//GEN-LAST:event_insertActionPerformed

    private void persentageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_persentageActionPerformed
    String serverType = jComboBox1.getSelectedItem().toString(); // Get selected server type (PHP or Servlet)
    String requestMethod = jComboBox2.getSelectedItem().toString(); // Get selected request method (POST or GET)

    String serverURL = "";
    if (serverType.equals("php")) {
        serverURL = "http://localhost:80/my-site/jav.php";
    } else if (serverType.equals("servlet")) {
        serverURL = "http://localhost:8088/hello/per"; // Replace "ServletName" with your actual servlet name and path
    }
 else if (serverType.equals("jsp")) {
        serverURL = "http://localhost:8088/hello/persantage.jsp"; // Replace "ServletName" with your actual servlet name and path
    }
    try {
            // Create the URL object and open the connection
            URL url = new URL(serverURL);
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            

             if (requestMethod.equals("Get")){
            connection.setRequestMethod("GET");

            // Get the response code
            int responseCode = connection.getResponseCode();

            if (responseCode == HttpURLConnection.HTTP_OK) {
                // Read the response from the PHP server
                BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));
                String inputLine;
                StringBuilder response = new StringBuilder();

                while ((inputLine = in.readLine()) != null) {
                    response.append(inputLine);
                }

                in.close();

              // Display the response for debugging
            System.out.println("Response from PHP Server:");
            System.out.println(response.toString());

            
            
             // Parse the JSON response to get percentage data
                String jsonResponse = response.toString();
              
                double passPercentage = getDoubleFromJSON(jsonResponse, "pass_percentage");
                double failPercentage = getDoubleFromJSON(jsonResponse, "fail_percentage");
                
                
                
                ///////////
                
                
       // Create the dataset for the pie chart
    DefaultPieDataset dataset = new DefaultPieDataset();
    dataset.setValue("Passed Students", passPercentage);
    dataset.setValue("Failed Students", failPercentage);

    // Create the JFreeChart object
    JFreeChart chart = ChartFactory.createPieChart("Student Performance", dataset, true, true, false);

    // Display the chart in a chart frame
    ChartFrame frame = new ChartFrame("Chart", chart);
    frame.pack();
    frame.setVisible(true);
                
                
                /////////
                
                
                
                // Display the data in the JTable
                String[] columnNames = {"Category", "Percentage"};
                Vector<Vector<String>> dataVector = new Vector<>();
                dataVector.add(new Vector<>(java.util.Arrays.asList("Passed Students", String.valueOf(passPercentage))));
                dataVector.add(new Vector<>(java.util.Arrays.asList("Failed Students", String.valueOf(failPercentage))));

                resultTable.setModel(new DefaultTableModel(dataVector, new Vector<>(java.util.Arrays.asList(columnNames))));
            } else {
                System.out.println("HTTP request failed: " + responseCode);
            }

            // Close the connection
            connection.disconnect();
            
            
             }else{
             
                  connection.setRequestMethod("POST");
    
    // Enable output and send the request body
    connection.setDoOutput(true);
    PrintWriter out = new PrintWriter(connection.getOutputStream());
    out.close();

    // Get the response code
    int responseCode = connection.getResponseCode();

    if (responseCode == HttpURLConnection.HTTP_OK) {
        // Read the response from the PHP server
        BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));
        String inputLine;
        StringBuilder response = new StringBuilder();

        while ((inputLine = in.readLine()) != null) {
            response.append(inputLine);
        }

        in.close();

        // Process the response as needed
        System.out.println("Response from PHP Server:");
        System.out.println(response.toString());

        // Parse the JSON response to get percentage data
        String jsonResponse = response.toString();
        double passPercentage = getDoubleFromJSON(jsonResponse, "pass_percentage");
        double failPercentage = getDoubleFromJSON(jsonResponse, "fail_percentage");

        // Create the dataset for the pie chart
        DefaultPieDataset dataset = new DefaultPieDataset();
        dataset.setValue("Passed Students", passPercentage);
        dataset.setValue("Failed Students", failPercentage);

        // Create the JFreeChart object
        JFreeChart chart = ChartFactory.createPieChart("Student Performance", dataset, true, true, false);

        // Display the chart in a chart frame
        ChartFrame frame = new ChartFrame("Chart", chart);
        frame.pack();
        frame.setVisible(true);

        // Display the data in the JTable
        String[] columnNames = {"Category", "Percentage"};
        Vector<Vector<String>> dataVector = new Vector<>();
        dataVector.add(new Vector<>(Arrays.asList("Passed Students", String.valueOf(passPercentage))));
        dataVector.add(new Vector<>(Arrays.asList("Failed Students", String.valueOf(failPercentage))));

        resultTable.setModel(new DefaultTableModel(dataVector, new Vector<>(Arrays.asList(columnNames))));
    } else {
        System.out.println("HTTP request failed: " + responseCode);
    }

    // Close the connection
    connection.disconnect();
                 
             }

        } catch (IOException e) {
            e.printStackTrace();
        }
}//GEN-LAST:event_persentageActionPerformed

    
private double getDoubleFromJSON(String jsonResponse, String key) {
    double value = -1.0;
    String pattern = "\"" + key + "\":\\s*(\\d+\\.\\d+)";
    Pattern regex = Pattern.compile(pattern);
    Matcher matcher = regex.matcher(jsonResponse);

    if (matcher.find()) {
        value = Double.parseDouble(matcher.group(1));
        DecimalFormat decimalFormat = new DecimalFormat("#.####");
        decimalFormat.setRoundingMode(RoundingMode.HALF_UP);
        value = Double.parseDouble(decimalFormat.format(value));
    }

    return value;
}


    private void highestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_highestActionPerformed
    String serverType = jComboBox1.getSelectedItem().toString(); // Get selected server type (PHP or Servlet)
    String requestMethod = jComboBox2.getSelectedItem().toString(); // Get selected request method (POST or GET)
    
     String serverURL = "";
    if (serverType.equals("php")) {
        serverURL = "http://localhost:80/my-site/higheist.php";
    } else if (serverType.equals("servlet")) {
        serverURL = "http://localhost:8088/hello/HighestGradesServlet"; // Replace "ServletName" with your actual servlet name and path
    }
    else if (serverType.equals("jsp")) {
        serverURL = "http://localhost:8088/hello/highest.jsp"; // Replace "ServletName" with your actual servlet name and path
    }

    

   try {
        // Create the URL object and open the connection
        URL url = new URL(serverURL);
        HttpURLConnection connection = (HttpURLConnection) url.openConnection();

        // Set the request method (GET or POST)
        connection.setRequestMethod("GET");

        // Get the response code
        int responseCode = connection.getResponseCode();

        if (responseCode == HttpURLConnection.HTTP_OK) {
            // Read the response from the PHP server
            BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            String inputLine;
            StringBuilder response = new StringBuilder();

            while ((inputLine = in.readLine()) != null) {
                response.append(inputLine);
            }

            in.close();

            
            
            System.out.println("Response from PHP Server: " + response.toString());
            
            String jsonResponse = response.toString();

            // Remove leading and trailing brackets from the JSON array representation
            jsonResponse = jsonResponse.substring(1, jsonResponse.length() - 1);

            // Split the JSON array into individual JSON objects
            String[] jsonObjects = jsonResponse.split("\\},\\{");
System.out.println("JSON Objects:");
for (String object : jsonObjects) {
    System.out.println(object);
}
            // Create the table model
            DefaultTableModel model = new DefaultTableModel();

            // Add column names to the model
            model.addColumn("Name");
            model.addColumn("Grade");
            model.addColumn("City");

            
         
// Iterate over the JSON objects and add the values to the model
for (String object : jsonObjects) {
    // Extract name, grade, and city from the JSON object
    String name = getNameFromJSONObject(object);
    int grade = getGradeFromJSONObject(object);
    String city = getCityFromJSONObject(object);
     System.out.println(name+" ."+grade+" ."+city+" .\n");

    // Add a row to the model
    model.addRow(new Object[]{name, grade, city});
}

// Set the model to the table
resultTable.setModel(model);
            
            
        } else {
            System.out.println("HTTP request failed: " + responseCode);
        }

        // Close the connection
        connection.disconnect();

    } catch (IOException e) {
        e.printStackTrace();
    }
}
private int getIdFromJSONObject(String jsonObject) {
    String idString = extractValueFromJSONObject(jsonObject, "id");
    if (!idString.isEmpty()) {
        return Integer.parseInt(idString);
    }
    return 0;
}

private int getGradeFromJSONObject(String jsonObject) {
    String gradeString = extractValueFromJSONObject(jsonObject, "grade");
    if (!gradeString.isEmpty()) {
        return Integer.parseInt(gradeString);
    }
    return 0;
}

private String getNameFromJSONObject(String jsonObject) {
   return extractValueFromJSONObject(jsonObject, "name")
            .replaceAll(",", ""); // Remove commas if present
}

private String getCityFromJSONObject(String jsonObject) {
     return extractValueFromJSONObject(jsonObject, "city")
            .replaceAll(",", ""); // Remove commas if present
}


private String extractValueFromJSONObject(String jsonObject, String key) {
  String[] keyValueArray = jsonObject.split("\"" + key + "\":\"");

    if (keyValueArray.length > 1) {
        String value = keyValueArray[1].split("\"")[0];
        return value;
    }

    return "";
    }//GEN-LAST:event_highestActionPerformed

    private void perCityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_perCityActionPerformed
               String selectedCity = (String) city.getSelectedItem();

          String serverType = jComboBox1.getSelectedItem().toString(); // Get selected server type (PHP or Servlet)
    String requestMethod = jComboBox2.getSelectedItem().toString(); // Get selected request method (POST or GET)
    
     String serverURL = "";
    if (serverType.equals("php")) {
        serverURL = "http://localhost:80/my-site/percity.php?city=" + selectedCity;
    } else if (serverType.equals("servlet")) {
        serverURL = "http://localhost:8088/hello/percity"; // Replace "ServletName" with your actual servlet name and path
    }
     else if (serverType.equals("jsp")) {
        serverURL = "http://localhost:8088/hello/percity.jsp"; // Replace "ServletName" with your actual servlet name and path
    }

        
        

    
    try {
        // Create a URL object and open the connection
        URL url = new URL(serverURL);
        HttpURLConnection connection = (HttpURLConnection) url.openConnection();

        
        if (requestMethod.equals("Get")){
        // Set the request method (GET)
        connection.setRequestMethod("GET");

        // Get the response code
        int responseCode = connection.getResponseCode();

        if (responseCode == HttpURLConnection.HTTP_OK) {
            // Read the response from the PHP server
            BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            String inputLine;
            StringBuilder response = new StringBuilder();

            while ((inputLine = in.readLine()) != null) {
                response.append(inputLine);
            }

            in.close();

            // Display the response for debugging
            System.out.println("Response from PHP Server:");
            System.out.println(response.toString());

            // Parse the JSON response as a string
            String jsonResponse = response.toString();

            // Extract the pass and fail percentages
            double passPercentage = getPercentageFromJSON(jsonResponse, "pass_percentage");
            double failPercentage = getPercentageFromJSON(jsonResponse, "fail_percentage");
            
            
            ////////////////
            
  // Create the dataset for the bar chart
DefaultCategoryDataset dataset = new DefaultCategoryDataset();
dataset.addValue(passPercentage, "Percentage", "Passed Students");
dataset.addValue(failPercentage, "Percentage", "Failed Students");

// Create the JFreeChart object
JFreeChart chart = ChartFactory.createBarChart("Student Performance", selectedCity, "Percentage", dataset);

// Customize the bar renderer
CategoryPlot plot = (CategoryPlot) chart.getPlot();
BarRenderer renderer = (BarRenderer) plot.getRenderer();
renderer.setMaximumBarWidth(0.2);  // Set the width of the bars (0.2 for example)

// Display the chart in a chart frame
ChartFrame frame = new ChartFrame("Chart", chart);
frame.pack();
frame.setVisible(true);
            
            /////////////////
     
            
            
     
            
            // Display the percentage data in the table
            DefaultTableModel model = new DefaultTableModel(new Object[][]{
                    {"Passed Students", passPercentage + "%"},
                    {"Failed Students", failPercentage + "%"},
            }, new String[]{"Category", "Percentage"});
            resultTable.setModel(model);
        } else {
            System.out.println("HTTP request failed: " + responseCode);
        }

        // Close the connection
        connection.disconnect();
        
        }
        else{
                 
           
           // Set the request method (POST)
    connection.setRequestMethod("POST");
    connection.setDoOutput(true);

    // Set the parameters for the POST request
    String selectedCityParam = "city=" + URLEncoder.encode(selectedCity, StandardCharsets.UTF_8.toString());
    byte[] postData = selectedCityParam.getBytes(StandardCharsets.UTF_8);
    int postDataLength = postData.length;
    connection.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
    connection.setRequestProperty("Content-Length", Integer.toString(postDataLength));

    // Write the POST data to the connection
    try (OutputStream outputStream = connection.getOutputStream()) {
        outputStream.write(postData);
    }

    // Get the response code
    int responseCode = connection.getResponseCode();

    if (responseCode == HttpURLConnection.HTTP_OK) {
        // Read the response from the PHP server
        BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));
        String inputLine;
        StringBuilder response = new StringBuilder();

        while ((inputLine = in.readLine()) != null) {
            response.append(inputLine);
        }

        in.close();

        // Display the response for debugging
        System.out.println("Response from PHP Server:");
        System.out.println(response.toString());

        // Parse the JSON response as a string
        String jsonResponse = response.toString();

        // Extract the pass and fail percentages
        double passPercentage = getPercentageFromJSON(jsonResponse, "pass_percentage");
        double failPercentage = getPercentageFromJSON(jsonResponse, "fail_percentage");

        // ...

      // Create the dataset for the bar chart
DefaultCategoryDataset dataset = new DefaultCategoryDataset();
dataset.addValue(passPercentage, "Percentage", "Passed Students");
dataset.addValue(failPercentage, "Percentage", "Failed Students");

// Create the JFreeChart object
JFreeChart chart = ChartFactory.createBarChart("Student Performance", selectedCity, "Percentage", dataset);

// Customize the bar renderer
CategoryPlot plot = (CategoryPlot) chart.getPlot();
BarRenderer renderer = (BarRenderer) plot.getRenderer();
renderer.setMaximumBarWidth(0.2);  // Set the width of the bars (0.2 for example)

// Display the chart in a chart frame
ChartFrame frame = new ChartFrame("Chart", chart);
frame.pack();
frame.setVisible(true);

        // ...

        // Display the percentage data in the table
        DefaultTableModel model = new DefaultTableModel(new Object[][]{
                {"Passed Students", passPercentage + "%"},
                {"Failed Students", failPercentage + "%"},
        }, new String[]{"Category", "Percentage"});
        resultTable.setModel(model);
    } else {
        System.out.println("HTTP request failed: " + responseCode);
    }

    // Close the connection
    connection.disconnect(); 
            
            
            
        }
    } catch (IOException e) {
        e.printStackTrace();
    }
    }//GEN-LAST:event_perCityActionPerformed
private double getPercentageFromJSON(String jsonResponse, String key) {
        double percentage = -1.0;
    int keyIndex = jsonResponse.indexOf("\"" + key + "\":");
    if (keyIndex >= 0) {
        int startIndex = keyIndex + key.length() + 3; // Adjusted the start index to skip the colon and quotation mark
        int endIndex = jsonResponse.indexOf(",", startIndex);
        if (endIndex == -1) {
            endIndex = jsonResponse.indexOf("}", startIndex);
        }
        try {
            String percentageString = jsonResponse.substring(startIndex, endIndex);

            // Remove any double quotes or other unwanted characters
            percentageString = percentageString.replaceAll("[^\\d.]", "");

            // Convert the percentage value to double
            percentage = Double.parseDouble(percentageString);
        } catch (NumberFormatException e) {
            e.printStackTrace();
        }
    }
    return percentage;
    }
    private void cityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cityActionPerformed

    }//GEN-LAST:event_cityActionPerformed

    private void distributionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_distributionActionPerformed

        
             String serverType = jComboBox1.getSelectedItem().toString(); // Get selected server type (PHP or Servlet)
    String requestMethod = jComboBox2.getSelectedItem().toString(); // Get selected request method (POST or GET)
    
     String serverURL = "";
    if (serverType.equals("php")) {
        serverURL = "http://localhost:80/my-site/distribution.php";
    } else if (serverType.equals("servlet")) {
        serverURL = "http://localhost:8088/hello/distribution"; // Replace "ServletName" with your actual servlet name and path
    }
     else if (serverType.equals("jsp")) {
        serverURL = "http://localhost:8088/hello/distribution.jsp"; // Replace "ServletName" with your actual servlet name and path
    }


      try {
            // Create the URL object and open the connection
            URL url = new URL(serverURL);
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
        if (requestMethod.equals("Get")){
            // Set the request method (GET or POST)
            connection.setRequestMethod("GET");

            // Get the response code
            int responseCode = connection.getResponseCode();

            if (responseCode == HttpURLConnection.HTTP_OK) {
                // Read the response from the PHP server
                BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));
                String inputLine;
                StringBuilder response = new StringBuilder();

                while ((inputLine = in.readLine()) != null) {
                    response.append(inputLine);
                }

                in.close();

              // Display the response for debugging
            System.out.println("Response from PHP Server:");
            System.out.println(response.toString());

             // Parse the JSON response to get percentage data
                String jsonResponse = response.toString();
              
                double avg = getDoubleFromJSON1(jsonResponse, "average_grade");
                double excellent = getDoubleFromJSON1(jsonResponse, "excellent");
                double very_good = getDoubleFromJSON1(jsonResponse, "very_good");
                double good = getDoubleFromJSON1(jsonResponse, "good");
                double acceptable = getDoubleFromJSON1(jsonResponse, "acceptable");
                double failed = getDoubleFromJSON1(jsonResponse, "failed");
                
                
                
                
                //////////////////////////
                
                
            // Create the dataset for the pie chart
    DefaultPieDataset dataset = new DefaultPieDataset();
    dataset.setValue("Excellent", excellent);
    dataset.setValue("Very Good", very_good);
    dataset.setValue("Good", good);
    dataset.setValue("Acceptable", acceptable);
    dataset.setValue("Failed", failed);

    // Create the JFreeChart object
    JFreeChart chart = ChartFactory.createPieChart("Grade Distribution", dataset, true, true, false);

    // Display the chart in a chart frame
    ChartFrame frame = new ChartFrame("Chart", chart);
    frame.pack();
    frame.setVisible(true);
                
                
                
                ///////////////////////
                
                
                
                // Display the data in the JTable
                String[] columnNames = {"Category", "Percentage"};
                Vector<Vector<String>> dataVector = new Vector<>();
                dataVector.add(new Vector<>(java.util.Arrays.asList("Average of grades", String.valueOf(avg))));
                dataVector.add(new Vector<>(java.util.Arrays.asList("excellent", String.valueOf(excellent))));
  dataVector.add(new Vector<>(java.util.Arrays.asList("veryGood", String.valueOf(very_good))));
                dataVector.add(new Vector<>(java.util.Arrays.asList("good", String.valueOf(good))));
  dataVector.add(new Vector<>(java.util.Arrays.asList("acceptable", String.valueOf(acceptable))));
                dataVector.add(new Vector<>(java.util.Arrays.asList("failed", String.valueOf(failed))));

                resultTable.setModel(new DefaultTableModel(dataVector, new Vector<>(java.util.Arrays.asList(columnNames))));
            } else {
                System.out.println("HTTP request failed: " + responseCode);
            }

            // Close the connection
            connection.disconnect();
            
        }
        else{
                // Set the request method (POST)
            connection.setRequestMethod("POST");
            connection.setDoOutput(true);

            // Set the parameters for the POST request
            String postData = ""; // Add your POST data here if needed
            byte[] postDataBytes = postData.getBytes(StandardCharsets.UTF_8);
            int postDataLength = postDataBytes.length;
            connection.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
            connection.setRequestProperty("Content-Length", Integer.toString(postDataLength));

            // Write the POST data to the connection
            try (OutputStream outputStream = connection.getOutputStream()) {
                outputStream.write(postDataBytes);
            }

          int responseCode = connection.getResponseCode();

            if (responseCode == HttpURLConnection.HTTP_OK) {
                // Read the response from the PHP server
                BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));
                String inputLine;
                StringBuilder response = new StringBuilder();

                while ((inputLine = in.readLine()) != null) {
                    response.append(inputLine);
                }

                in.close();

              // Display the response for debugging
            System.out.println("Response from PHP Server:");
            System.out.println(response.toString());

             // Parse the JSON response to get percentage data
                String jsonResponse = response.toString();
              
                double avg = getDoubleFromJSON1(jsonResponse, "average_grade");
                double excellent = getDoubleFromJSON1(jsonResponse, "excellent");
                double very_good = getDoubleFromJSON1(jsonResponse, "very_good");
                double good = getDoubleFromJSON1(jsonResponse, "good");
                double acceptable = getDoubleFromJSON1(jsonResponse, "acceptable");
                double failed = getDoubleFromJSON1(jsonResponse, "failed");
                
                
                
                
                
                
                // Create the dataset for the pie chart
                DefaultPieDataset dataset = new DefaultPieDataset();
                dataset.setValue("Excellent", excellent);
                dataset.setValue("Very Good", very_good);
                dataset.setValue("Good", good);
                dataset.setValue("Acceptable", acceptable);
                dataset.setValue("Failed", failed);

                // Create the JFreeChart object
                JFreeChart chart = ChartFactory.createPieChart("Grade Distribution", dataset, true, true, false);

                // Display the chart in a chart frame
                ChartFrame frame = new ChartFrame("Chart", chart);
                frame.pack();
                frame.setVisible(true);

                // Display the data in the JTable
                String[] columnNames = {"Category", "Percentage"};
                Vector<Vector<String>> dataVector = new Vector<>();
                dataVector.add(new Vector<>(Arrays.asList("Average of grades", String.valueOf(avg))));
                dataVector.add(new Vector<>(Arrays.asList("Excellent", String.valueOf(excellent))));
                dataVector.add(new Vector<>(Arrays.asList("Very Good", String.valueOf(very_good))));
                dataVector.add(new Vector<>(Arrays.asList("Good", String.valueOf(good))));
                dataVector.add(new Vector<>(Arrays.asList("Acceptable", String.valueOf(acceptable))));
                dataVector.add(new Vector<>(Arrays.asList("Failed", String.valueOf(failed))));

                resultTable.setModel(new DefaultTableModel(dataVector, new Vector<>(Arrays.asList(columnNames))));
            } else {
                System.out.println("HTTP request failed: " + responseCode);
            }

            // Close the connection
            connection.disconnect();
        }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_distributionActionPerformed

    
  private double getDoubleFromJSON1(String jsonResponse, String key) {
    double value = -1.0;
    String pattern = "\"" + key + "\":\"(\\d+(\\.\\d+)?)\"";
    Pattern regex = Pattern.compile(pattern);
    Matcher matcher = regex.matcher(jsonResponse);

    if (matcher.find()) {
        String valueString = matcher.group(1);
        value = Double.parseDouble(valueString);
    }

    return value;
}
    
    private void cityItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cityItemStateChanged
     }//GEN-LAST:event_cityItemStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(function.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(function.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(function.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(function.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new function().setVisible(true);
    
            }
        });
    }
   // private javax.swing.JComboBox<String> server;
   // private javax.swing.JComboBox<String> method;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> city;
    private javax.swing.JButton distribution;
    private javax.swing.JButton highest;
    private javax.swing.JButton insert;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton perCity;
    private javax.swing.JButton persentage;
    private javax.swing.JTable resultTable;
    // End of variables declaration//GEN-END:variables

}
